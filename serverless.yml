frameworkVersion: '3'

useDotenv: true

service: lambda-chatbot-app

provider:
  name: aws
  # Check https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html for available versions
  runtime: python3.10
  # Change the region to the one you normally use.
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  iam:
    role:
      statements:
        # Required to use Lazy Listers
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: "*"
        - Effect: 'Allow'
          Action:
            - 'dynamodb:*'
          Resource: "*"

  environment:
    #OPENAI_MODEL: 'gpt-3.5-turbo'
    OPENAI_MODEL: 'gpt-4-turbo-preview'
    
    # Please export these before deploying
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    TABLE_NAME_HISTORY: ${self:service}-${self:provider.stage}-history
# Endpoint List
functions:
  app:
    name: ${self:service}-${self:provider.stage}-app
    handler: app.handler
    timeout: 180
    events:
      - httpApi:
          path: /slack/events
          method: post

resources:
  Resources:
    ExampleTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-${self:provider.stage}-history
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "timestamp"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "timestamp"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# Files not to be included in the upload are prefixed with an '!' mark.
package:
  patterns:
    - "!.env"
    - "!.venv/**"
    - "!.secret/**"
    - "!node_modules/**"

# Zip the dependent libraries
plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    #zip: true
    #slim: true